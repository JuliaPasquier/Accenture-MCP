{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia\\\\OneDrive\\\\Documents\\\\AccentureChallenge\\\\accenture-MVP\\\\client\\\\src\\\\Components\\\\Calendar.jsx\";\nimport React from \"react\";\nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Calendar() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Fullcalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"dayGridMonth\",\n      headerToolbar: {\n        start: \"today prev,next\",\n        // will normally be on the left. if RTL, will be on the right\n        center: \"title\",\n        end: \"dayGridMonth,timeGridWeek,timeGridDay\" // will normally be on the right. if RTL, will be on the left\n      },\n      height: \"90vh\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n_c = Calendar;\nexport default Calendar;\n\n// import React, { useState } from 'react';\n// import FullCalendar from '@fullcalendar/react';\n// import dayGridPlugin from '@fullcalendar/daygrid';\n// import interactionPlugin from '@fullcalendar/interaction';\n\n// function Calendar() {\n//     const [selectedDate, setSelectedDate] = useState(null);\n//     const [workLocation, setWorkLocation] = useState('');\n\n//     const handleDateClick = (info) => {\n//         setSelectedDate(info.dateStr);\n//     };\n\n//     const handleWorkLocationChange = (event) => {\n//         setWorkLocation(event.target.value);\n//     };\n\n//     const handleValidation = () => {\n//         if (!selectedDate) {\n//             console.error('No date selected');\n//             return;\n//          }\n//         if (!workLocation) {\n//             console.error('No work location selected');\n//             return;\n//         }\n//         console.log('Validation Passed');\n//         console.log('Selected Date:', selectedDate);\n//         console.log('Work Location:', workLocation);\n//     };\n\n//     return (\n\n//                 <div>\n//                     <FullCalendar\n//                         plugins={[dayGridPlugin, interactionPlugin]}\n//                         initialView=\"dayGridMonth\"\n//                         selectable={true}\n//                         dateClick={handleDateClick}\n//                     />\n//                     {selectedDate && (\n//                         <div>\n//                             <h3>Selected Date: {selectedDate}</h3>\n//                             <select value={workLocation} onChange={handleWorkLocationChange}>\n//                                 <option value=\"\">Select Work Location</option>\n//                                 <option value=\"home\">Work from Home</option>\n//                                 <option value=\"office\">Work in the Office</option>\n//                                 <option value=\"client\">Work at Client Sites</option>\n//                             </select>\n//                             <button onClick={handleValidation}>Validate</button>\n//                         </div>\n//                     )}\n//                 </div>\n//             );\n//         }\n\n// export default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","Fullcalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","jsxDEV","_jsxDEV","Calendar","children","plugins","initialView","headerToolbar","start","center","end","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Julia/OneDrive/Documents/AccentureChallenge/accenture-MVP/client/src/Components/Calendar.jsx"],"sourcesContent":["\r\nimport React from \"react\";\r\nimport Fullcalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nfunction Calendar() {\r\n  return (\r\n    <div>\r\n      <Fullcalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView={\"dayGridMonth\"}\r\n        headerToolbar={{\r\n          start: \"today prev,next\", // will normally be on the left. if RTL, will be on the right\r\n          center: \"title\",\r\n          end: \"dayGridMonth,timeGridWeek,timeGridDay\", // will normally be on the right. if RTL, will be on the left\r\n        }}\r\n        height={\"90vh\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n// import FullCalendar from '@fullcalendar/react';\r\n// import dayGridPlugin from '@fullcalendar/daygrid';\r\n// import interactionPlugin from '@fullcalendar/interaction';\r\n\r\n\r\n// function Calendar() {\r\n//     const [selectedDate, setSelectedDate] = useState(null);\r\n//     const [workLocation, setWorkLocation] = useState('');\r\n\r\n//     const handleDateClick = (info) => {\r\n//         setSelectedDate(info.dateStr);\r\n//     };\r\n\r\n//     const handleWorkLocationChange = (event) => {\r\n//         setWorkLocation(event.target.value);\r\n//     };\r\n\r\n//     const handleValidation = () => {\r\n//         if (!selectedDate) {\r\n//             console.error('No date selected');\r\n//             return;\r\n//          }\r\n//         if (!workLocation) {\r\n//             console.error('No work location selected');\r\n//             return;\r\n//         }\r\n//         console.log('Validation Passed');\r\n//         console.log('Selected Date:', selectedDate);\r\n//         console.log('Work Location:', workLocation);\r\n//     };\r\n\r\n//     return (\r\n        \r\n//                 <div>\r\n//                     <FullCalendar\r\n//                         plugins={[dayGridPlugin, interactionPlugin]}\r\n//                         initialView=\"dayGridMonth\"\r\n//                         selectable={true}\r\n//                         dateClick={handleDateClick}\r\n//                     />\r\n//                     {selectedDate && (\r\n//                         <div>\r\n//                             <h3>Selected Date: {selectedDate}</h3>\r\n//                             <select value={workLocation} onChange={handleWorkLocationChange}>\r\n//                                 <option value=\"\">Select Work Location</option>\r\n//                                 <option value=\"home\">Work from Home</option>\r\n//                                 <option value=\"office\">Work in the Office</option>\r\n//                                 <option value=\"client\">Work at Client Sites</option>\r\n//                             </select>\r\n//                             <button onClick={handleValidation}>Validate</button>\r\n//                         </div>\r\n//                     )}\r\n//                 </div>\r\n//             );\r\n//         }\r\n\r\n\r\n// export default Calendar;\r\n\r\n"],"mappings":";AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,cAAc,MAAM,wBAAwB;AACnD,OAAOC,iBAAiB,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,SAASC,QAAQA,CAAA,EAAG;EAClB,oBACED,OAAA;IAAAE,QAAA,eACEF,OAAA,CAACL,YAAY;MACXQ,OAAO,EAAE,CAACP,aAAa,EAAEC,cAAc,EAAEC,iBAAiB,CAAE;MAC5DM,WAAW,EAAE,cAAe;MAC5BC,aAAa,EAAE;QACbC,KAAK,EAAE,iBAAiB;QAAE;QAC1BC,MAAM,EAAE,OAAO;QACfC,GAAG,EAAE,uCAAuC,CAAE;MAChD,CAAE;MACFC,MAAM,EAAE;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GAfQb,QAAQ;AAiBjB,eAAeA,QAAQ;;AAGvB;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}